%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <ctype.h>
	#include <math.h>
	#include <string.h>
	
	extern FILE* yyin;
	extern void yyerror(char []);
	extern int linecount;
	int count = 0, scope = 0;
	int lookup(char*);
	int insert(char*,int);
	void printsym();
	
	struct sym
	{
		char name[20];
		char token[20];
		char type[20];
		int scope;
		char other[20];
	}s[10];
		
%}

%token FOR RETURN PRINT PRE HEAD STRING ADDASS INT DB VOID

%union
{
	struct node
	{
		int type;
		char *token;
	}all;
}

%token<all> MAIN INTV FLOATV ID 

%start start

%%


start : PRE HEAD fundec main fun

fundec : INT ID { struct node t = $2;
				insert(t.token,0);} '(' INT ID ',' INT ID ')' ';';

main : INT MAIN '(' ')' {scope++;
						struct node t = $2;
						insert(t.token,0);} '{' body '}'

body : INT ID { struct node t = $2;
				insert(t.token,1);} '=' INTV ',' ID { struct node t = $7;
				insert(t.token,1);} '=' ID { struct node t = $10;
				lookup(t.token);} '+' FLOATV ';' nextdec;

nextdec : DB ID { struct node t = $2;
				insert(t.token,2);} '=' ID { struct node t = $5;
				lookup(t.token);} '(' ID { struct node t = $8;
				lookup(t.token);} ',' ID { struct node t = $11;
				lookup(t.token);} ')' ';' print;

print : PRINT '(' STRING ',' ID { struct node t = $5;
				lookup(t.token);} ')' ';';

fun : VOID ID { struct node t = $2;
				lookup(t.token); scope++; /* DO IT HERE TO INCLUDE PARAMS */} '(' INT ID { struct node t = $6;
				insert(t.token,1);} ',' INT ID { struct node t = $10;
				insert(t.token,1);} ')' '{' print '}';

%%

const char* getname(int x)
{
	if(x==0)
		return "function";
	if(x==1 || x==2)
		return "identifier";
}

const char* gettype(int x)
{
	if(x==0)
		return "int";
	if(x==1)
		return "int";
	if(x==2)
		return "double";
	//return "hello";
}
	
int main(int argc,char *argv[])
{
	FILE* src;
	if(argc==2 && (src=fopen(argv[1],"r")))
		yyin=src;
	if(!yyparse())
		printf("PARSING PASSED!\n");
	else
		printf("PARSING FAILED!\n");
	fclose(src);
	printsym();
	return 0;
}

int insert(char token[],int type)
{
	int i;
	for(i=0;i<count;i++)
	{
		if(strcmp(token,s[i].token)==0 && scope==s[i].scope)
			exit(1);
	}
	strcpy(s[count].name,getname(type));
	strcpy(s[count].token,token);
	strcpy(s[count].type,gettype(type));
	s[count].scope=scope;
	count++;
	return 0;
}

int lookup(char token[])
{
	int i;
	for(i=0;i<count;i++)
	{
		if(strcmp(token,s[i].token)==0)
		{
			//printf("HERE %d",s[i].scope);
			if(s[i].scope!=0)
			{
				if(scope==s[i].scope)
					return 0;
			}
			else 
				return 0;
		}
	}
	exit(1);
}

void printsym()
{
	int i;
	printf("\n\nsymbol table\n");
	for(i=0;i<count;i++)
		printf("%s %s %s %d\n",s[i].name,s[i].token,s[i].type,s[i].scope);
		
}

void yyerror(char msg[])
{
	printf("syntax error at line %d\n",linecount);
}

