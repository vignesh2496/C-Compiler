%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <ctype.h>
	#include <math.h>
	#include <string.h>
	#include "y.tab.h"
	
	int linecount = 1;
%}


preproc #include
header <[a-zA-Z]+\.h>
string \".+\"
multi \/\*.*\*\/ 
single \/\/.*
digit [0-9]
varname [_a-zA-Z][_a-zA-Z0-9]*

%%

{preproc} {printf("%s at line %d\n",yytext,linecount); return PRE;}
{header} {printf("%s at line %d\n",yytext,linecount); return HEAD;}
{string} {printf("%s at line %d\n",yytext,linecount); return STRING;}
{multi} {printf("%s at line %d\n",yytext,linecount); /*CAREFUL! Write correct regex*/}
{single} {printf("%s at line %d\n",yytext,linecount);}
"int" {printf("%s at line %d\n",yytext,linecount); return INT;}
"main" {printf("%s at line %d\n",yytext,linecount); yylval.all.token = strdup(yytext); yylval.all.type = 0; return MAIN;}
"for" {printf("%s at line %d\n",yytext,linecount); return FOR;}
"printf" {printf("%s at line %d\n",yytext,linecount); return PRINT;}
"return" {printf("%s at line %d\n",yytext,linecount); return RETURN;}
{varname} {printf("%s at line %d\n",yytext,linecount); yylval.all.token = strdup(yytext); yylval.all.type = 0; return ID;}
{digit}+ {printf("%s at line %d\n",yytext,linecount); yylval.all.token = strdup(yytext); yylval.all.type = 1; return INTV; }
{digit}+\.{digit}+ {printf("%s at line %d\n",yytext,linecount); yylval.all.token = strdup(yytext); yylval.all.type = 2; return FLOATV; /*BEWARE of float*/}
"+=" {printf("%s at line %d\n",yytext,linecount); return ADDASS;}
\n {linecount++;}
[ \t]+ {;}
. {printf("%s at line %d\n",yytext,linecount); return yytext[0];}

%%
